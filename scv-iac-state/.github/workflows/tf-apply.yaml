# This is a basic workflow to help you get started with Actions

name: TF-Apply
env:
  TFSTATE_ID: 50694
  AWSENV: 'dev'
  AWS_REGION: 'ap-southeast-1'
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches:
    - 'release'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"

  tf-apply:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # runs within your Docker container
    container:
      image: docker://cg5labs/my-alpine:latest    # checkout your code from your repository
    
    steps:

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
 
    - name: Terraform init
      run: |
          cd "${GITHUB_WORKSPACE}/templates" && \
          /usr/bin/terraform init \
            -backend=true \
            -backend-config="dynamodb_table=tf-remote-state-lock" \
            -backend-config="bucket=tc-remotestate-${TFSTATE_ID}"

    - name: Terraform apply
      run: | 
          cd "${GITHUB_WORKSPACE}/templates" && \
          /usr/bin/terraform  \
            apply -auto-approve \
            -var-file="../${AWSENV}/terraform.tfvars"

    - name: Terraform output to file
      run: |
          cd "${GITHUB_WORKSPACE}/templates" && \
          /usr/bin/terraform  \
            output -json > ${GITHUB_WORKSPACE}/tf_output.txt

    - name: Upload tf_output.txt
      uses: actions/upload-artifact@v2
      with:
        name: tf_output.txt
        path: tf_output.txt

    - uses: gliech/create-github-secret-action@v1
      with:
        name: FRONT_DOOR_PASSWORD
        value: Eternia
        pa_token: ${{ secrets.PA_TOKEN }}

            
