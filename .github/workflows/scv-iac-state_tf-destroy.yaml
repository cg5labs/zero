# IaC TF-State S3 Backend deletion

name: SCV-IaC-State_TF-Destroy
env:

  ######################### DEFAULTS - DO NOT EDIT #####################
  TEMPLATE: 'scv-iac-state'
  TFSTATE_BUCKET_NAME:  'scventures-development-scv-seed-state'
  TFSTATE_DYNAMODB_TABLE: "${TFSTATE_BUCKET_NAME}-lock"
  AWSENV: 'dev'
  AWS_REGION: 'ap-southeast-1'
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  ############################# END ####################################

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches:
    - 'release'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"

  tf-destroy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # runs within your Docker container
    container:
      image: docker://cg5labs/my-alpine:latest    # checkout your code from your repository
    
    steps:

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
 
    - name: Terraform init
      run: |
          cd "${GITHUB_WORKSPACE}/${TEMPLATE}" && \
          /usr/bin/terraform init \
            -backend=true \
            -backend-config="dynamodb_table=${TFSTATE_DYNAMODB_TABLE}" \
            -backend-config="bucket=${TFSTATE_BUCKET_NAME}"

    - name: Terraform refresh
      run: | 
          cd "${GITHUB_WORKSPACE}/${TEMPLATE}" && \
          /usr/bin/terraform  \
            refresh

    - name: Terraform destroy
      run: |
          cd "${GITHUB_WORKSPACE}/${TEMPLATE}" && \
          /usr/bin/terraform  \
            destroy -auto-approve 

